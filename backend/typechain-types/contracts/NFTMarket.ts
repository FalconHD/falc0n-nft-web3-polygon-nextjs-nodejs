/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export declare namespace NFTMarket {
  export type MarketTransactionStruct = {
    transactionId: BigNumberish;
    tokenId: BigNumberish;
    seller: string;
    buyer: string;
    price: BigNumberish;
  };

  export type MarketTransactionStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    transactionId: BigNumber;
    tokenId: BigNumber;
    seller: string;
    buyer: string;
    price: BigNumber;
  };

  export type CollectionStruct = {
    collectionToken: BigNumberish;
    tokenURI: string;
    creator: string;
    floor_price: BigNumberish;
    owners: string[];
    nfts: BigNumberish[];
  };

  export type CollectionStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    string[],
    BigNumber[]
  ] & {
    collectionToken: BigNumber;
    tokenURI: string;
    creator: string;
    floor_price: BigNumber;
    owners: string[];
    nfts: BigNumber[];
  };

  export type NFTStruct = {
    nftToken: BigNumberish;
    owner: string;
    price: BigNumberish;
    onSale: boolean;
    likes: string[];
  };

  export type NFTStructOutput = [
    BigNumber,
    string,
    BigNumber,
    boolean,
    string[]
  ] & {
    nftToken: BigNumber;
    owner: string;
    price: BigNumber;
    onSale: boolean;
    likes: string[];
  };
}

export interface NFTMarketInterface extends utils.Interface {
  functions: {
    "addOwner(address,uint256)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "buyNFT(uint256)": FunctionFragment;
    "createCollection(string)": FunctionFragment;
    "createNFTItem(string,uint256,uint256)": FunctionFragment;
    "fetchMarketTransactions()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getCollection(uint256)": FunctionFragment;
    "getCollectionByOwner()": FunctionFragment;
    "getCollections()": FunctionFragment;
    "getNFT(uint256)": FunctionFragment;
    "getNFTByCollection(uint256)": FunctionFragment;
    "getNFTbyOwner()": FunctionFragment;
    "getNFTs()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "numberOfLikes(uint256)": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setLike(uint256)": FunctionFragment;
    "setNFTPrice(uint256,uint256)": FunctionFragment;
    "setOnSaleNFT(uint256,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addOwner"
      | "approve"
      | "balanceOf"
      | "buyNFT"
      | "createCollection"
      | "createNFTItem"
      | "fetchMarketTransactions"
      | "getApproved"
      | "getCollection"
      | "getCollectionByOwner"
      | "getCollections"
      | "getNFT"
      | "getNFTByCollection"
      | "getNFTbyOwner"
      | "getNFTs"
      | "isApprovedForAll"
      | "name"
      | "numberOfLikes"
      | "ownerOf"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setLike"
      | "setNFTPrice"
      | "setOnSaleNFT"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addOwner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createNFTItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectionByOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTByCollection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNFTbyOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getNFTs", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numberOfLikes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLike",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNFTPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOnSaleNFT",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNFTItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectionByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getNFTByCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNFTbyOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfLikes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLike", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNFTPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOnSaleNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CollectionCreated(uint256,string,address,uint256,address[],uint256[])": EventFragment;
    "NFTCreated(uint256,address,uint256,bool,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface CollectionCreatedEventObject {
  collectionToken: BigNumber;
  tokenURI: string;
  owner: string;
  floor_price: BigNumber;
  owners: string[];
  nfts: BigNumber[];
}
export type CollectionCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, string[], BigNumber[]],
  CollectionCreatedEventObject
>;

export type CollectionCreatedEventFilter =
  TypedEventFilter<CollectionCreatedEvent>;

export interface NFTCreatedEventObject {
  nftToken: BigNumber;
  owner: string;
  price: BigNumber;
  onSale: boolean;
  likes: BigNumber;
}
export type NFTCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, boolean, BigNumber],
  NFTCreatedEventObject
>;

export type NFTCreatedEventFilter = TypedEventFilter<NFTCreatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface NFTMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addOwner(
      newOwner: string,
      collectionToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyNFT(
      NFTToken: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createCollection(
      tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createNFTItem(
      tokenURI: string,
      price: BigNumberish,
      collectionToken: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fetchMarketTransactions(
      overrides?: CallOverrides
    ): Promise<[NFTMarket.MarketTransactionStructOutput[]]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getCollection(
      collectionToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[NFTMarket.CollectionStructOutput]>;

    getCollectionByOwner(
      overrides?: CallOverrides
    ): Promise<[NFTMarket.CollectionStructOutput[]]>;

    getCollections(
      overrides?: CallOverrides
    ): Promise<[NFTMarket.CollectionStructOutput[]]>;

    getNFT(
      NFTToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[NFTMarket.NFTStructOutput]>;

    getNFTByCollection(
      _CollectionToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[NFTMarket.NFTStructOutput[]]>;

    getNFTbyOwner(
      overrides?: CallOverrides
    ): Promise<[NFTMarket.NFTStructOutput[]]>;

    getNFTs(overrides?: CallOverrides): Promise<[NFTMarket.NFTStructOutput[]]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    numberOfLikes(
      NFTToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLike(
      NFTToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNFTPrice(
      price: BigNumberish,
      NFTToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOnSaleNFT(
      NFTToken: BigNumberish,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOwner(
    newOwner: string,
    collectionToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  buyNFT(
    NFTToken: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createCollection(
    tokenURI: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createNFTItem(
    tokenURI: string,
    price: BigNumberish,
    collectionToken: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fetchMarketTransactions(
    overrides?: CallOverrides
  ): Promise<NFTMarket.MarketTransactionStructOutput[]>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getCollection(
    collectionToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<NFTMarket.CollectionStructOutput>;

  getCollectionByOwner(
    overrides?: CallOverrides
  ): Promise<NFTMarket.CollectionStructOutput[]>;

  getCollections(
    overrides?: CallOverrides
  ): Promise<NFTMarket.CollectionStructOutput[]>;

  getNFT(
    NFTToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<NFTMarket.NFTStructOutput>;

  getNFTByCollection(
    _CollectionToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<NFTMarket.NFTStructOutput[]>;

  getNFTbyOwner(
    overrides?: CallOverrides
  ): Promise<NFTMarket.NFTStructOutput[]>;

  getNFTs(overrides?: CallOverrides): Promise<NFTMarket.NFTStructOutput[]>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  numberOfLikes(
    NFTToken: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLike(
    NFTToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNFTPrice(
    price: BigNumberish,
    NFTToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOnSaleNFT(
    NFTToken: BigNumberish,
    _state: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOwner(
      newOwner: string,
      collectionToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyNFT(NFTToken: BigNumberish, overrides?: CallOverrides): Promise<void>;

    createCollection(
      tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createNFTItem(
      tokenURI: string,
      price: BigNumberish,
      collectionToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchMarketTransactions(
      overrides?: CallOverrides
    ): Promise<NFTMarket.MarketTransactionStructOutput[]>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getCollection(
      collectionToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<NFTMarket.CollectionStructOutput>;

    getCollectionByOwner(
      overrides?: CallOverrides
    ): Promise<NFTMarket.CollectionStructOutput[]>;

    getCollections(
      overrides?: CallOverrides
    ): Promise<NFTMarket.CollectionStructOutput[]>;

    getNFT(
      NFTToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<NFTMarket.NFTStructOutput>;

    getNFTByCollection(
      _CollectionToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<NFTMarket.NFTStructOutput[]>;

    getNFTbyOwner(
      overrides?: CallOverrides
    ): Promise<NFTMarket.NFTStructOutput[]>;

    getNFTs(overrides?: CallOverrides): Promise<NFTMarket.NFTStructOutput[]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    numberOfLikes(
      NFTToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLike(NFTToken: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setNFTPrice(
      price: BigNumberish,
      NFTToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOnSaleNFT(
      NFTToken: BigNumberish,
      _state: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "CollectionCreated(uint256,string,address,uint256,address[],uint256[])"(
      collectionToken?: null,
      tokenURI?: null,
      owner?: null,
      floor_price?: null,
      owners?: null,
      nfts?: null
    ): CollectionCreatedEventFilter;
    CollectionCreated(
      collectionToken?: null,
      tokenURI?: null,
      owner?: null,
      floor_price?: null,
      owners?: null,
      nfts?: null
    ): CollectionCreatedEventFilter;

    "NFTCreated(uint256,address,uint256,bool,uint256)"(
      nftToken?: null,
      owner?: null,
      price?: null,
      onSale?: null,
      likes?: null
    ): NFTCreatedEventFilter;
    NFTCreated(
      nftToken?: null,
      owner?: null,
      price?: null,
      onSale?: null,
      likes?: null
    ): NFTCreatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    addOwner(
      newOwner: string,
      collectionToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    buyNFT(
      NFTToken: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createCollection(
      tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createNFTItem(
      tokenURI: string,
      price: BigNumberish,
      collectionToken: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fetchMarketTransactions(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollection(
      collectionToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollectionByOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getCollections(overrides?: CallOverrides): Promise<BigNumber>;

    getNFT(
      NFTToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTByCollection(
      _CollectionToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNFTbyOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getNFTs(overrides?: CallOverrides): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfLikes(
      NFTToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLike(
      NFTToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNFTPrice(
      price: BigNumberish,
      NFTToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOnSaleNFT(
      NFTToken: BigNumberish,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOwner(
      newOwner: string,
      collectionToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyNFT(
      NFTToken: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createCollection(
      tokenURI: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createNFTItem(
      tokenURI: string,
      price: BigNumberish,
      collectionToken: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fetchMarketTransactions(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollection(
      collectionToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollectionByOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollections(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFT(
      NFTToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTByCollection(
      _CollectionToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNFTbyOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNFTs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfLikes(
      NFTToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLike(
      NFTToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNFTPrice(
      price: BigNumberish,
      NFTToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOnSaleNFT(
      NFTToken: BigNumberish,
      _state: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
