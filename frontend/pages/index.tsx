import Head from "next/head";
import { TopNFTS, HomeBanner, TopCollections } from "@/components";
import { NextWithLayoutPage } from "@/interfaces";
import { useBlockchain } from "hooks/useBlockchain";
import { getCollections } from "blockchain/collection";
import { useCallback, useEffect, useState } from "react";
import { useWallet } from "hooks/useWallet";
import axios from "axios";
import { getNFTS } from "blockchain/nfts";
import { ethers } from "ethers";
import { useSlice } from "hooks/reduxHooks";
import { useFetch } from "hooks/useFetch";

const Home: NextWithLayoutPage = () => {
  const [collectionFeed, setCollectionFeed] = useState<any>([]);
  const [{ user }, dispatch] = useSlice("contract");
  const [fetcher] = useFetch();
  const [nftsFeed, setNftsFeed] = useState<any>([]);
  const { contrat, setupContract } = useWallet();
  const { runner: collectionsRunner, data: collections } =
    useBlockchain(getCollections);
  const { runner: nftsRunner, data: nfts } = useBlockchain(getNFTS);
  useEffect(() => {
    (async () => {
      await collectionsRunner();
      await nftsRunner();
    })();
  }, [contrat]);

  const getCollectionsMemo = useCallback(async () => {
    const items = await Promise.all(
      collections.map(async (i: any) => {
        const tokenUri = i.tokenURI;
        console.log(tokenUri);

        if (!tokenUri) return;
        const { data } = await axios.get(tokenUri);
        return {
          ...i,
          collectionToken: ethers.utils.formatUnits(i.collectionToken, 18),
          floor_price: parseFloat(ethers.utils.formatUnits(i.floor_price, 18)),
          metadata: data,
        };
      })
    );
    setCollectionFeed(items);
  }, [collections]);

  const getNFTSFeed = useCallback(async () => {
    const items = await Promise.all(
      nfts.map(async (i: any) => {
        const tokenUri = await contrat?.tokenURI(i.nftToken);
        if (!tokenUri) return;
        const { data } = await axios.get(tokenUri);
        const targetnft = await fetcher({
          url: `/nft/${ethers.utils.formatUnits("" + i?.nftToken, 18)}`,
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        return {
          ...i,
          price: parseFloat(ethers.utils.formatUnits(i.price, 18)),
          metadata: data,
          likes:
            targetnft?.likes && targetnft?.likes.length > 0
              ? targetnft.likes
              : [],
        };
      })
    );
    console.log(items);

    setNftsFeed(items);
  }, [nfts]);

  useEffect(() => {
    if (collections) {
      getCollectionsMemo();
    } else {
      setupContract();
    }
  }, [collections]);

  useEffect(() => {
    if (nfts) {
      getNFTSFeed();
    } else {
      setupContract();
    }
  }, [nfts]);

  return (
    <div className="bg-Dark">
      <Head>
        <title>Falc0n NFT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="lg:px-20 md:px-20 ">
        {/* Banner  */}
        <HomeBanner />

        {/* Top Sellers */}
        <TopCollections collections={collectionFeed} />

        {/* Top NFTS */}
        <TopNFTS nfts={nftsFeed} />
      </div>
    </div>
  );
};

export default Home;
